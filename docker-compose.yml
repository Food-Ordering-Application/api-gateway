version: '3.7'

services:
  postgis:
    container_name: postgis
    restart: always
    image: kartoza/postgis:11.0-2.5
    volumes:
      # - ./pg-init-scripts:/docker-entrypoint-initdb.d
      - pg_data:/var/lib/postgresql
    ports:
      - '5432:5432'
    restart: always
    env_file: 
      - ./docker.env
    networks: 
      - my-network

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    ports:
      - '7999:80'
    # volumes:
    #   - dataPgAdmin:/root/.pgadmin
    env_file:
      - ./docker.env
    networks: 
      - my-network

  #RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: 'rabbitmq'
    tty: true
    restart: always
    env_file:
      - ./docker.env
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - dataRabbitMQ:/var/lib/rabbitmq/
      - logRabbitMQ:/var/log/rabbitmq
    networks: 
      - my-network

  api_gateway:
    container_name: api_gateway
    build:
      context: .
      target: development
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 8000:8000
    command: npm run start:dev
    env_file:
      - ./development.env
    networks: 
      - my-network

  delivery_redis:
    image: 'redis:6.2.4-alpine'
    #note the password
    command: redis-server --requirepass redis_password #password = redis_password
    container_name: delivery_redis
    ports:
      - 6379:6379
    volumes:
      - delivery_data:/data
    networks: 
      - my-network

  redsmin_proxy:
    image: redsmin/proxy
    container_name: redsmin_proxy
    restart: always
    env_file:
      - ./docker.env
    depends_on: 
      - delivery_redis
    networks: 
      - my-network
networks:
  my-network:
    driver: bridge
    name: my-network
volumes:
  pg_data:
  dataPostgres:
  dataPgAdmin:
  dataRabbitMQ:
  logRabbitMQ:
  delivery_data:
